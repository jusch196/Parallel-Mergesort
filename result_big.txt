# JMH version: 1.21
# VM version: JDK 10.0.2, OpenJDK 64-Bit Server VM, 10.0.2+13-Ubuntu-1ubuntu0.18.04.3
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: <none>
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MyBenchmark.testMethod_parallel

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 0,643 ns/op
# Warmup Iteration   2: 1,938 ns/op
# Warmup Iteration   3: 0,643 ns/op
# Warmup Iteration   4: 0,643 ns/op
# Warmup Iteration   5: 0,637 ns/op
Iteration   1: 0,713 ns/op
Iteration   2: 0,676 ns/op
Iteration   3: 0,647 ns/op
Iteration   4: 0,651 ns/op
Iteration   5: 0,648 ns/op

------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: false
Wie viele Fehlstellungen gibt es: 1

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

# Run progress: 10,00% complete, ETA 00:12:18
# Fork: 2 of 5
# Warmup Iteration   1: 0,660 ns/op
# Warmup Iteration   2: 2,015 ns/op
# Warmup Iteration   3: 2,122 ns/op
# Warmup Iteration   4: 0,640 ns/op
# Warmup Iteration   5: 0,645 ns/op
Iteration   1: 0,644 ns/op
Iteration   2: 0,646 ns/op
Iteration   3: 0,666 ns/op
Iteration   4: 0,649 ns/op
Iteration   5: 0,653 ns/op


------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: false
Wie viele Fehlstellungen gibt es: 1

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

# Run progress: 20,00% complete, ETA 00:10:53
# Fork: 3 of 5
# Warmup Iteration   1: 0,656 ns/op
# Warmup Iteration   2: 1,990 ns/op
# Warmup Iteration   3: 0,639 ns/op
# Warmup Iteration   4: 0,645 ns/op
# Warmup Iteration   5: 0,647 ns/op
Iteration   1: 0,641 ns/op
Iteration   2: 0,656 ns/op
Iteration   3: 0,657 ns/op
Iteration   4: 0,642 ns/op
Iteration   5: 0,652 ns/op

------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: false
Wie viele Fehlstellungen gibt es: 1

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0


# Run progress: 30,00% complete, ETA 00:09:28
# Fork: 4 of 5
# Warmup Iteration   1: 0,637 ns/op
# Warmup Iteration   2: 1,907 ns/op
# Warmup Iteration   3: 0,653 ns/op
# Warmup Iteration   4: 0,726 ns/op
# Warmup Iteration   5: 0,652 ns/op
Iteration   1: 0,705 ns/op
Iteration   2: 0,651 ns/op
Iteration   3: 0,705 ns/op
Iteration   4: 0,648 ns/op
Iteration   5: 0,708 ns/op


------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: false
Wie viele Fehlstellungen gibt es: 1

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

# Run progress: 40,00% complete, ETA 00:08:06
# Fork: 5 of 5
# Warmup Iteration   1: 0,641 ns/op
# Warmup Iteration   2: 1,924 ns/op
# Warmup Iteration   3: 0,652 ns/op
# Warmup Iteration   4: 0,652 ns/op
# Warmup Iteration   5: 0,649 ns/op
Iteration   1: 0,701 ns/op
Iteration   2: 0,649 ns/op
Iteration   3: 0,643 ns/op
Iteration   4: 0,650 ns/op
Iteration   5: 0,651 ns/op

------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: false
Wie viele Fehlstellungen gibt es: 1

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0


Result "org.sample.MyBenchmark.testMethod_parallel":
  0,662 ±(99.9%) 0,018 ns/op [Average]
  (min, avg, max) = (0,641, 0,662, 0,713), stdev = 0,024
  CI (99.9%): [0,644, 0,680] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 10.0.2, OpenJDK 64-Bit Server VM, 10.0.2+13-Ubuntu-1ubuntu0.18.04.3
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: <none>
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MyBenchmark.testMethod_unparallel

# Run progress: 50,00% complete, ETA 00:06:44
# Fork: 1 of 5
# Warmup Iteration   1: 0,624 ns/op
# Warmup Iteration   2: 1,908 ns/op
# Warmup Iteration   3: 0,640 ns/op
# Warmup Iteration   4: 0,692 ns/op
# Warmup Iteration   5: 0,692 ns/op
Iteration   1: 0,642 ns/op
Iteration   2: 0,632 ns/op
Iteration   3: 0,631 ns/op
Iteration   4: 0,643 ns/op
Iteration   5: 0,697 ns/op


------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

# Run progress: 60,00% complete, ETA 00:05:23
# Fork: 2 of 5
# Warmup Iteration   1: 0,630 ns/op
# Warmup Iteration   2: 1,931 ns/op
# Warmup Iteration   3: 0,638 ns/op
# Warmup Iteration   4: 0,636 ns/op
# Warmup Iteration   5: 0,693 ns/op
Iteration   1: 0,639 ns/op
Iteration   2: 0,642 ns/op
Iteration   3: 0,650 ns/op
Iteration   4: 0,637 ns/op
Iteration   5: 0,631 ns/op


------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

# Run progress: 70,00% complete, ETA 00:04:02
# Fork: 3 of 5
# Warmup Iteration   1: 0,631 ns/op
# Warmup Iteration   2: 1,873 ns/op
# Warmup Iteration   3: 0,698 ns/op
# Warmup Iteration   4: 0,641 ns/op
# Warmup Iteration   5: 0,697 ns/op
Iteration   1: 0,636 ns/op
Iteration   2: 0,694 ns/op
Iteration   3: 0,647 ns/op
Iteration   4: 0,635 ns/op
Iteration   5: 0,632 ns/op


------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

# Run progress: 80,00% complete, ETA 00:02:41
# Fork: 4 of 5
# Warmup Iteration   1: 0,623 ns/op
# Warmup Iteration   2: 1,928 ns/op
# Warmup Iteration   3: 0,639 ns/op
# Warmup Iteration   4: 0,646 ns/op
# Warmup Iteration   5: 0,637 ns/op
Iteration   1: 0,642 ns/op
Iteration   2: 0,647 ns/op
Iteration   3: 0,635 ns/op
Iteration   4: 0,642 ns/op
Iteration   5: 0,638 ns/op

------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

# Run progress: 90,00% complete, ETA 00:01:20
# Fork: 5 of 5
# Warmup Iteration   1: 0,643 ns/op
# Warmup Iteration   2: 1,916 ns/op
# Warmup Iteration   3: 0,630 ns/op
# Warmup Iteration   4: 0,633 ns/op
# Warmup Iteration   5: 0,644 ns/op
Iteration   1: 0,646 ns/op
Iteration   2: 0,645 ns/op
Iteration   3: 0,640 ns/op
Iteration   4: 0,630 ns/op
Iteration   5: 0,640 ns/op

------------------------------
----------SORTIERUNG:----------
------------------------------

Ist das unparallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0

Ist das parallele Array sortiert: true
Wie viele Fehlstellungen gibt es: 0


Result "org.sample.MyBenchmark.testMethod_unparallel":
  0,644 ±(99.9%) 0,012 ns/op [Average]
  (min, avg, max) = (0,630, 0,644, 0,697), stdev = 0,017
  CI (99.9%): [0,631, 0,656] (assumes normal distribution)


# Run complete. Total time: 00:13:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt  Score   Error  Units
MyBenchmark.testMethod_parallel    avgt   25  0,662 ± 0,018  ns/op
MyBenchmark.testMethod_unparallel  avgt   25  0,644 ± 0,012  ns/op
